# IEEE 754 floating point numbers
# https://www.codewars.com/kata/5efcaedf95d7110017896ced/train/python

# 다른 사람의 풀이
import struct
def float_to_IEEE_7540(x):
    val = struct.unpack('Q', struct.pack('d', x))[0]
    return b' '.join(struct.unpack('s 11s 52s', format(val, '064b').encode())).decode()

from struct import pack
s = "{:08b}".format
def float_to_IEEE_754(f : float) -> str :
    binary = ''.join(map(s, pack('!d', f)))
    return ' '.join((binary[0], binary[1:12], binary[12:]))

print(float_to_IEEE_754(+ 15.875), '0 10000000010 1111110000000000000000000000000000000000000000000000')
print(float_to_IEEE_754(- 1.0),    '1 01111111111 0000000000000000000000000000000000000000000000000000')
# print(float_to_IEEE_754(+ math.nan),       '0 11111111111 1000000000000000000000000000000000000000000000000000')
# print(float_to_IEEE_754(- math.nan),       '1 11111111111 1000000000000000000000000000000000000000000000000000')
# print(float_to_IEEE_754(+ math.inf),       '0 11111111111 0000000000000000000000000000000000000000000000000000')
# print(float_to_IEEE_754(- math.inf),       '1 11111111111 0000000000000000000000000000000000000000000000000000')
print(float_to_IEEE_754(+ 0.0),            '0 00000000000 0000000000000000000000000000000000000000000000000000')
print(float_to_IEEE_754(- 0.0),            '1 00000000000 0000000000000000000000000000000000000000000000000000')
# print(float_to_IEEE_754(+ float_info.max), '0 11111111110 1111111111111111111111111111111111111111111111111111')
# print(float_to_IEEE_754(- float_info.max), '1 11111111110 1111111111111111111111111111111111111111111111111111')
# print(float_to_IEEE_754(+ float_info.min), '0 00000000001 0000000000000000000000000000000000000000000000000000')
# print(float_to_IEEE_754(- float_info.min), '1 00000000001 0000000000000000000000000000000000000000000000000000')
