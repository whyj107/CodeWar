# Rubik's Cube Art
# https://www.codewars.com/kata/6387ea2cf418c41d277f3ffa/train/python

# 나의 풀이
def cube(n):
    result = []
    for i in range(2*n):
        if i < n:
            tmp = " "*(n-i-1) + "/\\"*(i+1) +'_\\'*n
        else:
            tmp = " "*(i-n) + "\\/"*(2*n-i) +'_/'*n
        result.append(tmp)
    return '\n'.join(result)

# 다른 사람의 풀이
def cube1(n):
    top = "\n".join(' ' * (n - i - 1) + '/\\' * (i + 1) + '_\\' * n for i in range(n))
    bottom = "\n".join(' ' * i + '\\/' * (n - i) + '_/' * n for i in range(n))
    return top + '\n' + bottom

inputs = [1, 3, 9, 10]
answers = [
    "/\\_\\\n\\/_/",
    "  /\\_\\_\\_\\\n /\\/\\_\\_\\_\\\n/\\/\\/\\_\\_\\_\\\n\\/\\/\\/_/_/_/\n \\/\\/_/_/_/\n  \\/_/_/_/",
    "        /\\_\\_\\_\\_\\_\\_\\_\\_\\_\\\n       /\\/\\_\\_\\_\\_\\_\\_\\_\\_\\_\\\n      /\\/\\/\\_\\_\\_\\_\\_\\_\\_\\_\\_\\\n     /\\/\\/\\/\\_\\_\\_\\_\\_\\_\\_\\_\\_\\\n    /\\/\\/\\/\\/\\_\\_\\_\\_\\_\\_\\_\\_\\_\\\n   /\\/\\/\\/\\/\\/\\_\\_\\_\\_\\_\\_\\_\\_\\_\\\n  /\\/\\/\\/\\/\\/\\/\\_\\_\\_\\_\\_\\_\\_\\_\\_\\\n /\\/\\/\\/\\/\\/\\/\\/\\_\\_\\_\\_\\_\\_\\_\\_\\_\\\n/\\/\\/\\/\\/\\/\\/\\/\\/\\_\\_\\_\\_\\_\\_\\_\\_\\_\\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/_/_/_/_/_/_/_/_/_/\n \\/\\/\\/\\/\\/\\/\\/\\/_/_/_/_/_/_/_/_/_/\n  \\/\\/\\/\\/\\/\\/\\/_/_/_/_/_/_/_/_/_/\n   \\/\\/\\/\\/\\/\\/_/_/_/_/_/_/_/_/_/\n    \\/\\/\\/\\/\\/_/_/_/_/_/_/_/_/_/\n     \\/\\/\\/\\/_/_/_/_/_/_/_/_/_/\n      \\/\\/\\/_/_/_/_/_/_/_/_/_/\n       \\/\\/_/_/_/_/_/_/_/_/_/\n        \\/_/_/_/_/_/_/_/_/_/",
    "         /\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\\n        /\\/\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\\n       /\\/\\/\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\\n      /\\/\\/\\/\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\\n     /\\/\\/\\/\\/\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\\n    /\\/\\/\\/\\/\\/\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\\n   /\\/\\/\\/\\/\\/\\/\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\\n  /\\/\\/\\/\\/\\/\\/\\/\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\\n /\\/\\/\\/\\/\\/\\/\\/\\/\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\\n/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\\n\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/_/_/_/_/_/_/_/_/_/_/\n \\/\\/\\/\\/\\/\\/\\/\\/\\/_/_/_/_/_/_/_/_/_/_/\n  \\/\\/\\/\\/\\/\\/\\/\\/_/_/_/_/_/_/_/_/_/_/\n   \\/\\/\\/\\/\\/\\/\\/_/_/_/_/_/_/_/_/_/_/\n    \\/\\/\\/\\/\\/\\/_/_/_/_/_/_/_/_/_/_/\n     \\/\\/\\/\\/\\/_/_/_/_/_/_/_/_/_/_/\n      \\/\\/\\/\\/_/_/_/_/_/_/_/_/_/_/\n       \\/\\/\\/_/_/_/_/_/_/_/_/_/_/\n        \\/\\/_/_/_/_/_/_/_/_/_/_/\n         \\/_/_/_/_/_/_/_/_/_/_/"
]

print(cube(inputs[0]))
print(answers[0])

print(cube(inputs[1]))
print(answers[1])

print(cube(inputs[2]))
print(answers[2])

print(cube(inputs[3]))
print(answers[3])